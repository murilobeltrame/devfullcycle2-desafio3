<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WebRTC App | Sender</title>
    <style>
        table, .block{
            width: 100%;
        }
    </style>
</head>
<body>
    <h1>{Sender} of a Web RTC App</h1>
    <table>
        <tr>
            <th>Status</th>
            <th>Messages</th>
        </tr>
        <tr>
            <td>
                <span>ID:</span>
                <input type="text" id="receiverId" title="Input the ID from receive">
                <button id="connectButton">Connect</button>
            </td>
            <td>
                <input type="text" id="sendMessageBox" placeholder="Enter a message..." autofocus="true">
                <button id="sendButton">Send</button>
                <button id="clearMessagesButton">Clear Messages (Local)</button>
            </td>
        </tr>
        <tr>
            <td>
                <div id="statusContainer"></div>
            </td>
            <td>
                <div id="messagesContainer"></div>
            </td>
        </tr>
        <tr>
            <td>
                <button id="resetButton" class="block">Reset</button>
            </td>
            <td>
                <button id="goButton" class="block">Go</button>
            </td>
        </tr>
        <tr>
            <td>
                <button id="fadeButton" class="block">Fade</button>
            </td>
            <td>
                <button id="offButton" class="block">Off</button>
            </td>
        </tr>
    </table>
    <script src="https://unpkg.com/peerjs@1.0.0/dist/peerjs.min.js"></script>
    <script>
        (function() {

            var lastPeerId = null;
            var peer = null; // own peer object
            var conn = null;
            var cueString = "<span class=\"cueMsg\">Cue: </span>";

            var statusContainer = document.querySelector('#statusContainer');
            var messagesContainer = document.querySelector('#messagesContainer');

            /**
            * Create the Peer object for our end of the connection.
            *
            * Sets up callbacks that handle any events related to our
            * peer object.
            */
            function initialize() {
                
                // Create own peer object with connection to shared PeerJS server
                peer = new Peer(null, {
                    debug: 2
                });

                // Connection OPEN handler
                peer.on('open', function (id) {
                    // Workaround for peer.reconnect deleting previous id
                    if (peer.id === null) {
                        console.log('Received null id from peer open');
                        peer.id = lastPeerId;
                    } else {
                        lastPeerId = peer.id;
                    }

                    console.log('ID: ' + peer.id);
                });

                // Connection STABLISHED handler
                peer.on('connection', function (c) {
                    // Disallow incoming connections
                    c.on('open', function() {
                        c.send("Sender does not accept incoming connections");
                        setTimeout(function() { c.close(); }, 500);
                    });
                });

                // Connection BROKEN handler
                peer.on('disconnected', function () {
                    statusContainer.innerHTML = "Connection lost. Please reconnect";
                    console.log('Connection lost. Please reconnect');

                    // Workaround for peer.reconnect deleting previous id
                    peer.id = lastPeerId;
                    peer._lastServerId = lastPeerId;
                    peer.reconnect();
                });

                // Connection CLOSED handler
                peer.on('close', function() {
                    conn = null;
                    statusContainer.innerHTML = "Connection destroyed. Please refresh";
                    console.log('Connection destroyed');
                });

                // Connection ERROR handler
                peer.on('error', function (err) {
                    console.log(err);
                    alert('' + err);
                });

            }

            /**
            * Create the connection between the two Peers.
            *
            * Sets up callbacks that handle any events related to the
            * connection and data received on it.
            */
            function join() {
                // Close old connection
                if (conn) {
                    conn.close();
                }

                // Create connection to destination peer specified in the input field
                conn = peer.connect(document.querySelector('#receiverId').value, {
                    reliable: true
                });

                conn.on('open', function () {
                    statusContainer.innerHTML = "Connected to: " + conn.peer;
                    console.log("Connected to: " + conn.peer);

                    // Check URL params for comamnds that should be sent immediately
                    var command = getUrlParam("command");
                    if (command)
                        conn.send(command);
                });

                // Handle incoming data (messages only since this is the signal sender)
                conn.on('data', function (data) {
                    addMessage("<span class=\"peerMsg\">Peer:</span> " + data);
                });

                conn.on('close', function () {
                    statusContainer.innerHTML = "Connection closed";
                });
            }

            /**
            * Get first "GET style" parameter from href.
            * This enables delivering an initial command upon page load.
            *
            * Would have been easier to use location.hash.
            */
            function getUrlParam(name) {
                name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
                var regexS = "[\\?&]" + name + "=([^&#]*)";
                var regex = new RegExp(regexS);
                var results = regex.exec(window.location.href);
                if (results == null)
                    return null;
                else
                    return results[1];
            };

            /**
            * Send a signal via the peer connection and add it to the log.
            * This will only occur if the connection is still alive.
            */
            function signal(sigName) {
                if (conn && conn.open) {
                    conn.send(sigName);
                    console.log(sigName + " signal sent");
                    addMessage(cueString + sigName);
                } else {
                    console.log('Connection is closed');
                }
            }

            /**
            * Adds a formatted message
            */
            function addMessage(msg) {
                var now = new Date();
                var h = now.getHours();
                var m = addZero(now.getMinutes());
                var s = addZero(now.getSeconds());

                if (h > 12)
                    h -= 12;
                else if (h === 0)
                    h = 12;

                function addZero(t) {
                    if (t < 10)
                        t = "0" + t;
                    return t;
                };

                messagesContainer.innerHTML = "<br><span class=\"msg-time\">" + h + ":" + m + ":" + s + "</span>  -  " + msg + messagesContainer.innerHTML;
            }

            /**
            * Clears messages
            */
            function clearMessages() {
                messagesContainer.innerHTML = '';
                addMessage('Messages cleared');
            }

            // DOM Handlers
            var sendMessageBox = document.querySelector('#sendMessageBox');
            var sendButton = document.querySelector('#sendButton');

            sendMessageBox.addEventListener('keypress', function(e) {
                var event = e || window.event;
                var char = event.which || event.keyCode;
                if (char == '13')
                    sendButton.click();
            });

            sendButton.addEventListener('click', function() {
                if (conn && conn.open) {
                    var msg = sendMessageBox.value;
                    sendMessageBox.value = "";
                    conn.send(msg);
                    console.log("Sent: " + msg);
                    addMessage("<span class=\"selfMsg\">Self: </span> " + msg);
                } else {
                    console.log('Connection is closed');
                }
            });

            document.querySelector('#clearMessagesButton').addEventListener('click', clearMessages);

            document.querySelector('#connectButton').addEventListener('click', join);

            document.querySelector('#goButton').addEventListener('click', function(){ signal('Go'); });

            document.querySelector('#resetButton').addEventListener('click', function(){ signal('Reset'); });

            document.querySelector('#fadeButton').addEventListener('click', function(){ signal('Fade'); });

            document.querySelector('#offButton').addEventListener('click', function(){ signal('Off'); });

            // Since all our callbacks are setup, start the process of obtaining an ID
            initialize();

        })();
    </script>
</body>
</html>